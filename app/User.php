<?php

namespace App;

use Illuminate\Notifications\Notifiable;
use Illuminate\Foundation\Auth\User as Authenticatable;

class User extends Authenticatable
{
    use Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'username', 'email', 'password',
    ];
    protected $appends=['avatar'];
    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password', 'remember_token',
    ];

    
    public function posts()
    {
        return $this->hasMany('App\Post');
    }

    public function followers(){
        return $this->belongsToMany('App\User','follows','follower_id','user_id');
    }

    public function following(){
        return $this->belongsToMany('App\User','follows','user_id','follower_id');
    }
//not me
    public function isNotTheUser(User $user){
        return $this->id !== $user->id;
    }
//    someone i'm alreddy follow him
    public function isFollowing(User $user){
        return (bool)$this->following->where('id',$user->id)->count();
    }

//  should this user not min and not alerdy follow him
    public function canFollow(User $user){
        if(!$this->isNotTheUser($user)){
            return false;
        }
        return !$this->isFollowing($user);
    }
// shoul to be allredy is follow
    public function canUnFollow(User $user){
        return $this->isFollowing($user);
    }



    public function getAvatarAttribute()
    {
//        return route('questions.show',$this->id);
        $email = $this->email;
        $size = 3;
        return "https://www.gravatar.com/avatar/" . md5(strtolower(trim($email))) . "&s" . $size;
    }
    public function getRouteKeyName()
    {
        return 'username'; // TODO: Change the autogenerated stub
    }

}
